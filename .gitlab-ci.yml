# SPDX-License-Identifier: FSFAP
# Copyright (C) 2019 John Hsu
# Copyright (C) 2019-2020 Colin B. Macdonald
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.
#
# This the CI configuration for Plom

# TODO list
# ---------
#   * use our Dockerfile instead of apt-get
#       - I think this is "dind"

image: ubuntu:18.04

#variables:
#  DOCKER_DRIVER: overlay2

# Need pip >= 19, which turns out to be nontrivial: cannot just call
# pip/pip3 after upgrading, hence `python3 -m pip` stuff below
before_script:
  - apt-get update
  - DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata curl
  - apt-get --no-install-recommends --yes install
    zbar-tools cmake make imagemagick g++ openssl
    python3-passlib python3-pandas python3-pyqt5 python3-pytest
    python3-pyqt5.qtsql python3-pyqrcode python3-png python3-dev
    python3-pip python3-setuptools python3-wheel
    texlive-latex-extra dvipng latexmk texlive-fonts-recommended
    python3-requests-toolbelt python3-tqdm
    libpango-1.0 libpangocairo-1.0 libjpeg-turbo8-dev libturbojpeg0-dev python3-cffi
    iproute2 psmisc file
  # apt-get --no-install-recommends --yes install libimage-exiftool-perl
  - pip3 install --upgrade pip
  - which pip3
  - python3 -m pip -V
  - python3 -m pip install --upgrade setuptools
  # let setup.py deps do their thing
  # python3 -m pip install pymupdf weasyprint peewee toml aiohttp pyzbar
  # not needed until prediction
  # python3 -m pip install imutils lapsolver opencv-python tensorflow

# for now, static and build are unused, we run all in parallel
stages:
  - static_analysis
  - build
  - test
  - final


job docker-image:
  image: docker:19.03.11
  stage: test
  before_script:
    - echo "Overriding before_script"
  services:
    - docker:19.03.11-dind
  variables:
    IM: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    IM_LATEST: $CI_REGISTRY_IMAGE:latest
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IM_LATEST || true
    - docker build --cache-from $IM_LATEST --tag $IM .
    - docker push $IM


# If we are on the master branch, we tag the above as "latest"
job docker-image-master:
  image: docker:19.03.11
  stage: final
  before_script:
    - echo "Overriding before_script"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  services:
    - docker:19.03.11-dind
  variables:
    IM: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    RELEASE_IM: $CI_REGISTRY_IMAGE:latest
  script:
    - docker pull $IM
    - docker tag $IM $RELEASE_IM
    - docker push $RELEASE_IM
  only:
    # should be "master", temporarily set to this while debugging
    - CIwork2


job black:
  stage: test
  image: "python:3.8"
  before_script:
    - pip3 install black
  script:
    - black --check --diff plom


#job unitTests:
#  stage: test
#  script:
#    # or pytest-3 -l
#    - python3 -m pytest -l


job unitTestsInstalledPkg:
  stage: test
  script:
    - python3 -m pip install packaging
    - python3 ./setup.py build bdist_wheel
    - pushd dist
    - python3 -m pip install plom-*.whl
    - popd
    # no go to some other dir and run tests on installed pkg
    - mkdir tmp
    - pushd tmp
    - pytest-3 -l --pyargs plom
    - popd


job demoServer:
  stage: test
  script:
    - python3 ./setup.py build bdist_wheel
    - pushd dist
    - python3 -m pip install plom-*.whl
    - popd
    - mkdir demo
    - pushd demo
    - plom-build new --demo
    # Start server
    - ip addr
    - plom-server init
    - plom-server users --demo
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - plom-build class --demo -w 1234
    - plom-build make -w 1234
    - python3 -m plom.produce.faketools -w 1234
    - plom-scan process fake_scribbled_exams.pdf
    - plom-scan read   -w 4567
    - plom-scan upload -w 4567
    - plom-scan status -w 4567
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd


job fullWorkFlow:
  stage: test
  script:
    - python3 ./setup.py build bdist_wheel
    - pushd dist
    - python3 -m pip install plom-*.whl
    - popd
    # Build tests
    - mkdir play
    - pushd play
    - plom-build new
    - plom-build parse
    - python3 -m plom.produce.demotools
    # TODO: override the private seed
    # sed specAndDatabase/verifiedSpec.toml -i -e "s/privateSeed = .*/privateSeed = \"8253996856355501\"/"
    # diff -u specAndDatabase/verifiedSpec.toml ../tmp/resources/verifiedSpec.toml
    # Start server
    - ip addr
    - plom-server init
    - plom-server users --demo
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - plom-build class --demo -w 1234
    - plom-build make -w 1234
    - A=`ls papersToPrint/ | wc -l`  # How many files?
    - bash -c "[[ $A == 20 ]]"       # should be 20
    # TODO: https://gitlab.math.ubc.ca/andrewr/MLP/issues/695
    - python3 -m plom.produce.faketools -w 1234
    # Scan and upload
    # supposed to fail:
    - if (plom-scan process); then false; else true; fi
    - plom-scan process fake_scribbled_exams.pdf
    - plom-scan read -s localhost -w 4567
    - plom-scan upload -s localhost -w 4567
    - plom-scan upload -u -s localhost -w 4567
    - plom-scan upload -c -s localhost -w 4567
    - plom-scan status -s localhost -w 4567
    ## not supposed to be done yet:
    - if (plom-finish status -w 1234); then false; else true; fi
    - python3 -m plom.client.randoIDer -s localhost -u user0 -w 0123
    - python3 -m plom.client.randoMarker -s localhost -u user0 -w 0123
    - plom-finish status -w 1234
    - plom-finish csv -w 1234
    - A=`cat marks.csv  | wc -l`      # How many lines?
    - bash -c "[[ $A == 20 ]]"        # should be 19 + 1 - since 1 page from 1 test is deleted
    - file -b marks.csv  | grep ASCII   # should be ascii test
    - plom-finish reassemble -w 1234
    - A=`ls reassembled/ | wc -l`    # How many files?
    - bash -c "[[ $A == 19 ]]" # since 1 test incomplete
    - A=`du -sm reassembled/ | cut -f1`  # Don't regress on issue #627
    - bash -c "[[ $A -lt 40 ]]"          # not more than 10 MB
    - plom-finish webpage
    - A=`ls codedReturn/ | wc -l`    # How many files?
    - bash -c "[[ $A == 20 ]]"       # 20-1 pdf + 1 html
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd

job backgroundTest:
  before_script:
    - echo "Overriding before_script"
  stage: test
  script:
    - sleep 60 &
    - jobs -l
    - jobs -p
    - echo "Sleep job has started"
    - sleep 2
    - jobs -l
    - jobs -p
    - echo "We will kill it"
    - kill -9 %1
    - echo "Should be no jobs and this should succeed"
    - jobs -p

job appstreamValid:
  stage: test
  image: alpine
  before_script:
    - apk add appstream-glib
  script:
    - appstream-util validate-relax org.plomgrading.PlomClient.metainfo.xml

# SPDX-License-Identifier: FSFAP
# Copyright (C) 2019 John Hsu
# Copyright (C) 2019-2021 Colin B. Macdonald
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.

# This the CI configuration for Plom
#
# TODO list
# ---------
#   * bump docker image to 20.10.2
#     https://docs.docker.com/engine/release-notes/
#   * bump Ubuntu 18.04 to 20.04 (and in Dockerfile)

image: docker:19.03.14

services:
  - docker:19.03.14-dind

variables:
  DOCKER_DRIVER: overlay2
  IM: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  IM_LATEST: $CI_REGISTRY_IMAGE:latest

stages:
  - static_analysis
  - build
  - test
  - packaging
  - prep
  - release


docker-image:
  stage: build
  needs: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo $DOCKER_USE_CACHE
    - >
      if [ "$DOCKER_USE_CACHE" == "1" ]; then
        docker pull $IM_LATEST || true
      fi
    - >
      if [ "$DOCKER_USE_CACHE" == "1" ]; then
        docker build --cache-from $IM_LATEST --tag $IM .
      else
        docker build --tag $IM .
      fi
    - docker push $IM


# Get fast results by running tests in a copy-pasta of the docker-image job
quick-pytests:
  stage: build
  needs: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IM_LATEST || true
    - docker build --cache-from $IM_LATEST --tag $IM .
    - docker run $IM pytest-3 -l --pyargs plom


# If we are on the master branch, we tag the above as "latest"
docker-image-master:
  stage: packaging
  needs: ["docker-image"]
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $IM
    - docker tag $IM $IM_LATEST
    - docker push $IM_LATEST
  only:
    - master


# If we have a tag, then push to PyPI using TWINE_* env vars
# Debug: `upload -r testpypi`, comment `only`, change and unprotect token
pypi:
  image: $IM
  stage: packaging
  needs: ["docker-image"]
  cache: {}
  script:
    - python3 -m pip install -U twine wheel setuptools
    - python3 setup.py sdist bdist_wheel
    - python3 -m twine check dist/*
    - python3 -m twine upload dist/*
  only:
    - tags


release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo 'running release_job'
    - export EXTRA_DESCRIPTION="TODO EDIT"
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'Created using the release-cli $EXTRA_DESCRIPTION'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'
    milestones:
      # ${CI_COMMIT_TAG:1} might strip the leading v
      - $CI_COMMIT_TAG


# block release unless tag matches in-source version
tag_matches_ver:
  stage: static_analysis
  image: python:3.9
  rules:
   - if: $CI_COMMIT_TAG
  script:
    - export VER=$(python -c "exec(open('plom/version.py').read()); print(__version__)")
    - echo "Extracted version string '$VER'"
    - echo "Now comparing to CI_COMMIT_TAG '$CI_COMMIT_TAG'"
    - echo $VER
    - echo $CI_COMMIT_TAG
    # note reversed logic and extra "v"
    - python -c "exit(not 'v$VER' == '$CI_COMMIT_TAG')"


black:
  stage: static_analysis
  image: python:3.9
  before_script:
    - pip3 install "black~=20.8b"
  script:
    - black --check --diff plom
  allow_failure: true


basic:
  stage: test
  needs: ["docker-image"]
  image: $IM
  script:
    - plom-init


unittests:
  stage: test
  needs: ["docker-image"]
  image: $IM
  script:
    - pytest-3 -l --pyargs plom


# Notes:
# masked out some stuff that deps on tensorflow
doctests:
  stage: test
  needs: ["docker-image"]
  image: $IM
  before_script:
    - pip3 install --upgrade pytest
  script:
    # TODO how to run only doctests?  here we just ignore-glib on "test_*"
    - pytest --version
    - pytest -l --doctest-modules --doctest-continue-on-failure --ignore-glob="*IDReader_TF" --ignore-glob="*digitHunter.py" --ignore-glob="*/test_*.py" plom


demoserver:
  stage: test
  needs: ["docker-image"]
  image: $IM
  before_script:
    - apt-get --no-install-recommends --yes install iproute2 psmisc file curl
  script:
    - mkdir demo
    - pushd demo
    - plom-build new --demo
    # Start server
    - ip addr
    - plom-server init
    - plom-server users --demo
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - plom-build class --demo -w 1234
    - plom-build make -w 1234
    - python3 -m plom.produce.faketools -w 1234
    - plom-scan process -w 4567 fake_scribbled_exams1.pdf
    - plom-scan upload -w 4567 fake_scribbled_exams1
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams2.pdf
    - plom-scan upload -w 4567 fake_scribbled_exams2
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams3.pdf
    - plom-scan upload -w 4567 fake_scribbled_exams3
    - plom-scan status -w 4567
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd


hwdemoserver:
  stage: test
  needs: ["docker-image"]
  image: $IM
  before_script:
    - apt-get --no-install-recommends --yes install iproute2 psmisc file curl
  script:
    - mkdir demo
    - pushd demo
    - plom-build new --demo
    # Start server
    - ip addr
    - plom-server init
    - plom-server users --demo
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - plom-build class --demo -w 1234
    - plom-build make -w 1234
    - plom-hwscan status -w 4567
    - python3 -m plom.produce.hwFaker -w 1234
    - plom-hwscan allbyq -w 4567 -y
    - plom-hwscan missing -w 4567 -y
    - plom-hwscan submitted -w 4567
    - plom-hwscan submitted -d
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd


fullworkflow:
  stage: test
  needs: ["docker-image"]
  image: $IM
  before_script:
    - apt-get --no-install-recommends --yes install iproute2 psmisc file curl
  script:
    # Build tests
    - mkdir play
    - pushd play
    - plom-build new
    - plom-build parse
    - python3 -m plom.produce.demotools
    # TODO: override the private seed
    # sed specAndDatabase/verifiedSpec.toml -i -e "s/privateSeed = .*/privateSeed = \"8253996856355501\"/"
    # diff -u specAndDatabase/verifiedSpec.toml ../tmp/resources/verifiedSpec.toml
    # Start server
    - ip addr
    - plom-server init
    - plom-server users --demo
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - plom-build class --demo -w 1234
    - plom-build make -w 1234
    - A=`ls papersToPrint/ | wc -l`  # How many files?
    - bash -c "[[ $A == 20 ]]"       # should be 20
    # TODO: https://gitlab.math.ubc.ca/andrewr/MLP/issues/695
    - python3 -m plom.produce.faketools -w 1234
    # Scan and upload
    # supposed to fail:
    - if (plom-scan process); then false; else true; fi
    - plom-scan process -w 4567 fake_scribbled_exams1.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams1
    # TODO: I removed some -c lines here...
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams2.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams2
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams3.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams3
    - plom-scan status -w 4567
    ## not supposed to be done yet:
    - if (plom-finish status -w 1234); then false; else true; fi
    - python3 -m plom.client.randoIDer -s localhost -u user0 -w 0123
    - python3 -m plom.client.randoMarker -s localhost -u user0 -w 0123
    - plom-finish status -w 1234
    - plom-finish csv -w 1234
    - A=`cat marks.csv  | wc -l`      # How many lines?
    - bash -c "[[ $A == 20 ]]"        # should be 19 + 1 - since 1 page from 1 test is deleted
    - file -b marks.csv  | grep ASCII   # should be ascii test
    - plom-finish reassemble -w 1234
    - A=`ls reassembled/ | wc -l`    # How many files?
    - bash -c "[[ $A == 19 ]]" # since 1 test incomplete
    - A=`du -sm reassembled/ | cut -f1`  # Don't regress on issue #627
    - bash -c "[[ $A -lt 40 ]]"          # not more than 10 MB
    - plom-finish webpage
    - A=`ls codedReturn/ | wc -l`    # How many files?
    - bash -c "[[ $A == 20 ]]"       # 20-1 pdf + 1 html
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd

backgroundTest:
  image: alpine
  stage: static_analysis
  script:
    - sleep 60 &
    - jobs -l
    - jobs -p
    - echo "Sleep job has started"
    - sleep 2
    - jobs -l
    - jobs -p
    - echo "We will kill it"
    - kill -9 %1
    - echo "Should be no jobs and this should succeed"
    - jobs -p

appstreamValid:
  stage: static_analysis
  image: alpine
  before_script:
    - apk add appstream-glib
  script:
    - appstream-util validate-relax org.plomgrading.PlomClient.metainfo.xml


# get latest pip deps, doesn't use docker, closer to user install
# TODO: use newer ubuntu too?
no_dock_new_deps:
  stage: build
  needs: []
  image: ubuntu:18.04
  allow_failure: true
  # Need pip >= 19, which turns out to be nontrivial: cannot just call
  # pip/pip3 after upgrading, hence `python3 -m pip` stuff below
  before_script:
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata curl
    - apt-get --no-install-recommends --yes install
      zbar-tools cmake make imagemagick g++ openssl
      python3-pytest python3-dev
      python3-pip python3-setuptools python3-wheel
      texlive-latex-extra dvipng latexmk texlive-fonts-recommended
      libpango-1.0 libpangocairo-1.0 libjpeg-turbo8-dev libturbojpeg0-dev
      libgl1-mesa-glx libsm6 libxrender1
      iproute2 psmisc file
    # apt-get --no-install-recommends --yes install libimage-exiftool-perl
    - pip3 install --upgrade pip
    - python3 -m pip -V
    - python3 -m pip install --upgrade setuptools wheel
    - python3 -m pip install packaging
    # https://github.com/jbaiter/jpegtran-cffi/issues/27
    - python3 -m pip install cffi
  script:
    - python3 -m pip install .
    # First, run the unit tests
    - pytest-3 -l --pyargs plom
    # Build tests
    - mkdir play
    - pushd play
    - plom-build new
    - plom-build parse
    - python3 -m plom.produce.demotools
    - ip addr
    - plom-server init
    - plom-server users --demo
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - plom-build class --demo -w 1234
    - plom-build make -w 1234
    - A=`ls papersToPrint/ | wc -l`  # How many files?
    - bash -c "[[ $A == 20 ]]"       # should be 20
    - python3 -m plom.produce.faketools -w 1234
    # Scan and upload
    # supposed to fail:
    - if (plom-scan process); then false; else true; fi
    - plom-scan process -w 4567 fake_scribbled_exams1.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams1
    # TODO: I removed some -c lines here...
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams2.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams2
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams3.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams3
    - plom-scan status -w 4567
    # not supposed to be done yet:
    - if (plom-finish status -w 1234); then false; else true; fi
    - python3 -m plom.client.randoIDer -s localhost -u user0 -w 0123
    - python3 -m plom.client.randoMarker -s localhost -u user0 -w 0123
    - plom-finish status -w 1234
    - plom-finish csv -w 1234
    - A=`cat marks.csv  | wc -l`      # How many lines?
    - bash -c "[[ $A == 20 ]]"        # should be 19 + 1 - since 1 page from 1 test is deleted
    - file -b marks.csv  | grep ASCII   # should be ascii test
    - plom-finish reassemble -w 1234
    - A=`ls reassembled/ | wc -l`    # How many files?
    - bash -c "[[ $A == 19 ]]" # since 1 test incomplete
    - A=`du -sm reassembled/ | cut -f1`  # Don't regress on issue #627
    - bash -c "[[ $A -lt 40 ]]"          # not more than 10 MB
    - plom-finish webpage
    - A=`ls codedReturn/ | wc -l`    # How many files?
    - bash -c "[[ $A == 20 ]]"       # 20-1 pdf + 1 html
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd


# Build Client Binaries on Ubuntu 18.04
# this one is built from our official docker image
# Before extracting the version, we did:
# for f in PlomClient*.bin; do mv -v "$f" "${f/.bin/-ubuntu1804.bin}"; done;
linuxbin_ubuntu1804:
  stage: packaging
  needs: ["docker-image"]
  image: $IM
  before_script:
    - apt-get --no-install-recommends --yes install iproute2 psmisc file curl
    - apt-get install -y libglib2.0 qt5-default
    - python3 -m pip install pyinstaller
  script:
    - pyinstaller client.linux.spec
    - export VER=$(python -c "exec(open('plom/version.py').read()); print(__version__)")
    - echo "Extracted version string '$VER'"
    - export NAME=PlomClient-$VER-linux-ubuntu1804.bin
    - mv dist/PlomClient*.bin $NAME
    - md5sum PlomClient*.bin > md5sum
    - ls $NAME
    - cat md5sum
    - echo $CI_COMMIT_TAG
    # TODO: failure here will not stop the run: grep the result for success string?
    - >
      if [ "x$CI_COMMIT_TAG" != "x" ]; then
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $NAME "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/PlomClient-linux/$VER/$NAME"
      fi
  artifacts:
    paths:
    - PlomClient*.bin
    - md5sum

binary_upload:
  stage: prep
  image: alpine
  # TURN ON ONCE READY
  #rules:
  # - if: $CI_COMMIT_TAG
  script:
    - ls
    - md5sum PlomClient*
    - export AA=`md5sum PlomClient*`
    - echo $AA
    - export BB="Checksums:\n$AA"
    - echo $BB

# TODO: consider doing only on the master branch and only when tests pass
linuxbin_ubuntu2004:
  stage: packaging
  needs: []
  image: ubuntu:20.04
  before_script:
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata curl
    - apt-get --no-install-recommends --yes install iproute2 psmisc file binutils
      python3 python3-dev python3-wheel python3-setuptools python3-pip
    - apt-get install -y libglib2.0 qt5-default
    - pip3 install --upgrade pip
    - python3 -m pip install pyinstaller
  script:
    - python3 -m pip install -r requirements.txt.client
    - pyinstaller client.linux.spec
    - mv dist/PlomClient*.bin .
    - for f in PlomClient*.bin; do mv -v "$f" "${f/.bin/-ubuntu2004.bin}"; done;
    - md5sum PlomClient*.bin > md5sum
    - ls PlomClient*.bin
    - cat md5sum
  artifacts:
    paths:
    - PlomClient*.bin
    - md5sum


# TODO: consider doing only on the master branch and only when tests pass
linuxbin_centos:
  stage: packaging
  needs: []
  image: centos:7
  before_script:
    - yum install -y dnf
    - dnf update -y
    - dnf install -y python3 python3-wheel python3-setuptools python3-pip
    # Need deps for PyQt5/Qt/plugins/platforms/libqxcb.so, others, found with `ldd`
    - dnf install -y qt5-qtbase libxkbcommon-x11 libXcomposite
    - pip3 install --upgrade pip
    - python3 -m pip install pyinstaller
  script:
    - python3 -m pip install -r requirements.txt.client
    - pyinstaller client.linux.spec
    - export VER=$(python -c "exec(open('plom/version.py').read()); print(__version__)")
    - echo "Extracted version string '$VER'"
    - export NAME=PlomClient-$VER-linux-centos7.bin
    - mv dist/PlomClient*.bin $NAME
    - md5sum PlomClient*.bin > md5sum
    - ls $NAME
    - cat md5sum
    - echo $CI_COMMIT_TAG
    # TODO: failure here will not stop the run: grep the result for success string?
    - >
      if [ "x$CI_COMMIT_TAG" != "x" ]; then
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $NAME "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/PlomClient-linux/$VER/$NAME"
      fi
  artifacts:
    paths:
    - PlomClient*.bin
    - md5sum


.shared_windows_runners:
  tags:
  - shared-windows
  - windows
  - windows-1809


winmintest:
  extends:
  - .shared_windows_runners
  stage: test
  needs: []
  script:
  - choco install -y python3
  - refreshenv
  - c:\Python39\Scripts\pip install toml
  - c:\Python39\Scripts\pip install requests-toolbelt
  - c:\Python39\Scripts\pip install pyqt5
  - refreshenv
  - echo $Env:Path
  - c:\Python39\python -m plom.scripts.client -h


# Build Windows client binaries
# This section written in PowerShell
# TODO: consider doing this only on the master branch
winpyinst:
  extends:
  - .shared_windows_runners
  stage: packaging
  needs: []
  before_script:
  - choco install -y python3 --version 3.9
  - choco install -y curl
  - refreshenv
  script:
  - C:\Python39\Scripts\pip install -r requirements.txt.client
  # temporarily limit to 4.1 for Issue #1353
  - C:\Python39\Scripts\pip install pyinstaller==4.1
  - refreshenv
  - c:\Python39\python -m plom.scripts.client -h
  - c:\Python39\Scripts\pyinstaller client.windows.spec
  - echo $Env:CI_COMMIT_TAG
  - echo $Env:CI_COMMIT_SHA
  - $VER = &"c:\Python39\python" -c "exec(open('plom\\version.py').read()); print(__version__)"
  - echo "Extracted version string '$VER'"
  - $NAME = "PlomClient-$VER-windows.exe"
  - move dist\PlomClient*.exe $NAME
  - CertUtil -hashfile $NAME MD5 > md5sum.txt
  - ls $NAME
  - type md5sum.txt
  - $exe = "$Env:ChocolateyInstall\bin\curl.exe"
  - $token = "JOB-TOKEN:$Env:CI_JOB_TOKEN"
  - $url = "$Env:CI_API_V4_URL/projects/$Env:CI_PROJECT_ID/packages/generic/PlomClient-windows/$VER/$NAME"
  - if ("x$Env:CI_COMMIT_TAG" -ne "x") {& $exe -H $token -T $NAME $url}
  artifacts:
    paths:
    - PlomClient*.exe
    - md5sum.txt

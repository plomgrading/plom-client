# SPDX-License-Identifier: FSFAP
# Copyright (C) 2019 John Hsu
# Copyright (C) 2019-2020 Colin B. Macdonald
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.
#
# This the CI configuration for Plom

# TODO list
# ---------
#   * use our Dockerfile instead of apt-get
#       - I think this is "dind"
#   * prepare an sql dump and some pngs so
#     we can fake the grading.
#   * test scripts 08 through 12

image: ubuntu:18.04

variables:
  KUBERNETES_VERSION: 1.11.7
  HELM_VERSION: 2.12.3

  DOCKER_DRIVER: overlay2

  ROLLOUT_RESOURCE_TYPE: deployment

# Need pip >= 19, which turns out to be nontrivial: cannot just call
# pip/pip3 after upgrading, hence `python3 -m pip` stuff below
before_script:
  - apt-get update
  - DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata curl
  - apt-get --no-install-recommends --yes install
    zbar-tools cmake make imagemagick dvipng g++
    python3-passlib python3-seaborn python3-pandas python3-pyqt5
    python3-pyqt5.qtsql python3-pyqrcode python3-png python3-dev
    python3-pip python3-setuptools python3-wheel python3-toml
    python3-requests-toolbelt texlive-latex-extra texlive-fonts-recommended
    latexmk python3-xvfbwrapper
    python3-tqdm libpango-1.0 libpangocairo-1.0
    iproute2 psmisc file
  - pip3 install --upgrade pip
  - which pip3
  - python3 -m pip -V
  - python3 -m pip install --upgrade setuptools
  - python3 -m pip install pymupdf weasyprint imutils lapsolver peewee cheroot aiohttp pyzbar

stages:
  - build
  - test

job buildPapers:
  stage: test
  script:
    - python3 ./setup.py build bdist_wheel
    - pushd dist
    - python3 -m pip install plom-*.whl
    - popd
    # First build sources pdfs
    - pushd testTemplates
    - pdflatex latexTemplate.tex
    - pdflatex --interaction=batchmode latexTemplate.tex
    - pdflatex --interaction=batchmode latexTemplate.tex
    - pdflatex latexTemplatev2.tex
    - pdflatex --interaction=batchmode latexTemplatev2.tex
    - pdflatex --interaction=batchmode latexTemplatev2.tex
    - popd
    # download some pre-existing files
    - mkdir tmp
    - pushd tmp
    - curl https://www.math.ubc.ca/~cbm/tmp/resources_0984da85.tar.gz | tar -zx
    - popd
    # Now build tests
    - mkdir play
    - pushd play
    - plom-build new
    - cp ../testTemplates/latexTemplate.pdf sourceVersions/version1.pdf
    - cp ../testTemplates/latexTemplatev2.pdf sourceVersions/version2.pdf
    # overwrite the testSpec with our prepared one
    - cp ../tmp/resources/verifiedSpec.toml testSpec.toml
    - plom-build parse
    # TODO: override the private seed
    - sed specAndDatabase/verifiedSpec.toml -i -e "s/privateSeed = .*/privateSeed = \"8253996856355501\"/"
    - diff -u specAndDatabase/verifiedSpec.toml ../tmp/resources/verifiedSpec.toml
    - plom-build make blank
    # TODO: https://github.com/vslavik/diff-pdf, not in Ubuntu repos?
    - A=`ls papersToPrint/ | wc -l`  # How many files?
    - bash -c "[[ $A == 20 ]]"       # should be 20
    - popd

job serverStarts:
  stage: test
  script:
    - python3 ./setup.py build bdist_wheel
    - pushd dist
    - python3 -m pip install plom-*.whl
    - popd
    - mkdir play
    # This not ideal, should clone https://gitlab.math.ubc.ca/cbm/plommintestdata.git
    - curl https://www.math.ubc.ca/~cbm/tmp/testBlank16.pdf > play/foo.pdf
    - mkdir tmp
    - pushd tmp
    - curl https://www.math.ubc.ca/~cbm/tmp/resources_0984da85.tar.gz | tar -zx
    - popd
    # scan and upload
    - pushd play
    # supposed to fail:
    - if (plom-scan.py process); then false; else true; fi
    - plom-scan.py process foo.pdf
    # Start server
    - ip addr
    - mkdir specAndDatabase
    # TODO: combine with buildPaper job above and build plom.db ourselves
    - cp ../tmp/resources/plom.db specAndDatabase/
    - cp ../tmp/resources/verifiedSpec.toml specAndDatabase/
    - plom-server.py class --demo
    - plom-server.py init
    # TODO: use demo users instead:
    - cp ../tmp/resources/userList.json serverConfiguration/
    - plom-server.py launch &
    - sleep 1
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    # TODO: -s, -w should go with the subcommand (after "read")
    - plom-scan.py -s localhost -w rennacs read
    - plom-scan.py -s localhost -w rennacs upload
    - plom-scan.py -s localhost -w rennacs upload -u
    - plom-scan.py -s localhost -w rennacs upload -c
    - plom-scan.py -s localhost -w rennacs status
    ## not supposed to be done yet:
    - if (python3 -m plom.finish.022_check_completed -s localhost -w hackhack); then false; else true; fi
    - python3 -m plom.client.randoIDer -s localhost -u anne -w enna
    - python3 -m plom.client.randoMarker -s localhost -u anne -w enna
    - python3 -m plom.finish.021_startHere
    - python3 -m plom.finish.022_check_completed -s localhost -w hackhack
    ## currently 024 must be run in the server directory
    - python3 -m plom.finish.023_spreadsheet -s localhost -w hackhack
    - A=`cat testMarks.csv  | wc -l`  # How many lines?
    - bash -c "[[ $A == 17 ]]"        # should be 16 + 1
    - file -b testMarks.csv  | grep ASCII   # should be ascii test
    - python3 -m plom.finish.024a_reassemble_completed -s localhost -w hackhack
    - A=`ls reassembled/ | wc -l`    # How many files?
    - bash -c "[[ $A == 16 ]]"
    - A=`du -sm reassembled/ | cut -f1`  # Don't regress on issue #627
    - bash -c "[[ $A -lt 5 ]]"           # not more than 5 MB
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l

job backgroundTest:
  before_script:
    - echo "Overriding before_script"
  stage: test
  script:
    - sleep 60 &
    - jobs -l
    - jobs -p
    - echo "Sleep job has started"
    - sleep 2
    - jobs -l
    - jobs -p
    - echo "We will kill it"
    - kill -9 %1
    - echo "Should be no jobs and this should succeed"
    - jobs -p

# TODO: maybe she'll come back one day...
#job someUnitTests:
#  stage: test
#  script:
#    - pushd finishing
#    - ./run_unit_tests.sh
#    - popd
#    - pushd resources
#    - ./run_unit_tests.sh
#    - popd
